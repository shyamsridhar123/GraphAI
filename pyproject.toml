[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "graphiti-cosmos"
version = "1.0.0"
description = "Intelligent Knowledge Graph Platform using Azure Cosmos DB and Azure OpenAI"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
authors = [
    { name = "Shyam Sridhar", email = "shyamsridhar123@example.com" },
]
keywords = [
    "knowledge-graph",
    "azure",
    "cosmos-db",
    "openai",
    "graph-database",
    "artificial-intelligence",
    "business-intelligence",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "gremlinpython>=3.7.1,<4.0.0",
    "openai>=1.82.0,<2.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "httpx>=0.24.1,<1.0.0",
    "numpy>=1.24.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0",
    "rich>=13.0.0,<14.0.0",
    "streamlit>=1.45.1",
    "plotly>=6.1.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
viz = [
    "matplotlib>=3.7.0",
    "plotly>=5.15.0",
    "networkx>=3.1.0",
    "dash>=2.12.0",
]

[project.urls]
Homepage = "https://github.com/shyamsridhar123/graphiti-cosmos"
Documentation = "https://github.com/shyamsridhar123/graphiti-cosmos/blob/main/README.md"
Repository = "https://github.com/shyamsridhar123/graphiti-cosmos"
Issues = "https://github.com/shyamsridhar123/graphiti-cosmos/issues"

[project.scripts]
graphiti-cosmos = "src.graphiti_cosmos:main"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

[tool.hatch.build]
sources = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/graphiti_cosmos"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["graphiti_cosmos"]
known_third_party = ["gremlinpython", "openai", "pandas", "numpy", "rich"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "gremlinpython.*",
    "openai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/demos/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
